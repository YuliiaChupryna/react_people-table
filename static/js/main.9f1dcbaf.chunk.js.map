{"version":3,"sources":["NewPerson.js","PersonName.js","Person.js","getDataApi.js","PeopleTable.js","App.js","index.js"],"names":["PersonName","_ref","name","sex","react_default","a","createElement","className","Person","titles","person","match","history","location","cn","concat","century","person--selected","toLowerCase","split","join","params","personName","onClick","push","pathname","search","map","title","person--born-before-1650","born","person--died-after-1800","died","src_PersonName","person--male","person--female","person--old","age","mother","father","children","child","index","Fragment","length","getData","url","fetch","then","response","json","date","Date","years","i","getFullYear","NewPerson","peopleList","addPerson","updateChildren","_useState","useState","_useState2","Object","slicedToArray","setName","_useState3","_useState4","setSex","_useState5","_useState6","setBorn","_useState7","_useState8","setDied","_useState9","_useState10","setMother","_useState11","_useState12","setFather","operations","handleSelect","_ref3","key","value","target","onSubmit","event","preventDefault","trim","type","placeholder","onChange","_ref2","replace","required","id","htmlFor","year","filter","yearOfDeath","Number","Infinity","woman","currentWoman","man","currentMan","getPeopleWithChildren","listOfPeople","objectSpread2","Math","ceil","PeopleTable","people","setPeople","useEffect","loadPeopleFromServer","searchingName","regenerator_default","async","_context","prev","next","awrap","sent","toConsumableArray","t0","stop","urlParams","URLSearchParams","getSortedPeople","sortingTitle","sort","firstPerson","secondPerson","localeCompare","max","apply","visiblePeople","get","includes","sortingOrder","reverse","setSortBy","react_router","path","exact","render","src_NewPerson","react_router_dom","to","lib","debounceTimeout","delete","toString","set","toUpperCase","title--active","currentPerson","src_Person","App","component","ReactDOM","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.9f1dcbaf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst date = new Date();\nconst years = [];\n\nfor (let i = 1558; i < date.getFullYear(); i += 1) {\n  years.push(i);\n}\n\nconst NewPerson = ({ history, peopleList, addPerson, updateChildren }) => {\n  const [name, setName] = useState('');\n  const [sex, setSex] = useState('');\n  const [born, setBorn] = useState('');\n  const [died, setDied] = useState('');\n  const [mother, setMother] = useState('');\n  const [father, setFather] = useState('');\n\n  const operations = {\n    name: setName,\n    sex: setSex,\n    born: setBorn,\n    died: setDied,\n    mother: setMother,\n    father: setFather,\n  };\n\n  const handleNameChange = ({ target: { value } }) => {\n    setName(value.replace(/^ |[^a-zA-Z|\\s]+/g, ''));\n  };\n\n  const handleSelect = ({ target: { value } }, key) => {\n    operations[key](value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addPerson(name.trim(), sex, born, died, mother, father);\n    updateChildren();\n\n    setName('');\n    setSex(sex);\n    setBorn('');\n    setDied('');\n    setMother('');\n    setFather('');\n\n    history.push('/people');\n  };\n\n  return (\n    <form\n      className=\"new-person\"\n      onSubmit={handleSubmit}\n    >\n\n      <input\n        type=\"text\"\n        value={name}\n        placeholder=\"Enter name\"\n        onChange={handleNameChange}\n        className=\"new-person__name\"\n        required\n      />\n\n      <input\n        type=\"radio\"\n        name=\"sex\"\n        value=\"m\"\n        required={sex === ''}\n        id=\"male\"\n        onChange={event => handleSelect(event, 'sex')}\n      />\n      <label htmlFor=\"male\">male</label>\n      <input\n        type=\"radio\"\n        name=\"sex\"\n        value=\"f\"\n        required={sex === ''}\n        id=\"female\"\n        onChange={event => handleSelect(event, 'sex')}\n      />\n      <label htmlFor=\"female\">female</label>\n\n      <br />\n\n      <select\n        value={born}\n        onChange={event => handleSelect(event, 'born')}\n        className=\"new-person__year\"\n        required\n      >\n        <option value=\"\">born</option>\n        {[...years].map(year => (\n          <option value={year} key={year}>{year}</option>\n        ))}\n      </select>\n\n      <select\n        value={died}\n        onChange={event => handleSelect(event, 'died')}\n        className=\"new-person__year\"\n        required\n      >\n        <option value=\"\">died</option>\n        {born && years\n          .filter(yearOfDeath => yearOfDeath >= Number(born)\n            && yearOfDeath <= Number(born) + 149)\n          .map(year => (\n            <option value={year} key={year}>{year}</option>\n          ))}\n        {date.getFullYear() - born < 150\n        && (<option value={Infinity}>alive</option>)}\n      </select>\n\n      <br />\n\n      <select\n        value={mother}\n        onChange={event => handleSelect(event, 'mother')}\n        className=\"new-person__parent\"\n        required\n      >\n        <option value=\"\">Choose mother</option>\n        {born\n        && peopleList\n          .filter(person => person.sex === 'f' && person.died >= born\n            && person.born <= born - 16)\n          .map(woman => woman.name)\n          .map(currentWoman => (\n            <option\n              value={currentWoman}\n              key={currentWoman}\n            >\n              {currentWoman}\n            </option>\n          ))}\n      </select>\n\n      <select\n        value={father}\n        onChange={event => handleSelect(event, 'father')}\n        className=\"new-person__parent\"\n        required\n      >\n        <option value=\"\">Choose father</option>\n        {born\n        && peopleList\n          .filter(person => person.sex === 'm' && person.died >= born\n            && person.born <= born - 16)\n          .map(man => man.name)\n          .map(currentMan => (\n            <option value={currentMan} key={currentMan}>{currentMan}</option>\n          ))}\n      </select>\n\n      <br />\n\n      <button\n        type=\"submit\"\n        className=\"new-person__submit\"\n      >\n        Add Person\n      </button>\n    </form>\n\n  );\n};\n\nNewPerson.propTypes = {\n  peopleList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    age: PropTypes.number.isRequired,\n    mother: PropTypes.string.isRequired,\n    father: PropTypes.string.isRequired,\n    children: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      sex: PropTypes.string,\n    })).isRequired,\n  })).isRequired,\n  addPerson: PropTypes.func.isRequired,\n  updateChildren: PropTypes.func.isRequired,\n  history: PropTypes.shape(\n    { push: PropTypes.func },\n  ).isRequired,\n};\n\nexport default NewPerson;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PersonName = ({ name, sex }) => (\n  <span className={sex === 'm' ? 'person--man' : 'person--woman'}>\n    {name}\n  </span>\n);\n\nPersonName.propTypes = {\n  name: PropTypes.string.isRequired,\n  sex: PropTypes.string.isRequired,\n};\nexport default PersonName;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cn from 'classnames';\nimport PersonName from './PersonName';\n\nconst Person = ({ titles, person, match, history, location }) => {\n  const selectPerson = () => {\n    history.push({\n      pathname: `/people/${person.name.toLowerCase().split(' ').join('-')}`,\n      search: location.search,\n    });\n  };\n\n  return (\n    <tr\n      className={\n        cn(\n          'person',\n          `person--lived-in-${person.century}`,\n          {\n            'person--selected':\n              person.name.toLowerCase().split(' ').join('-')\n              === match.params.personName,\n          }\n        )}\n      onClick={selectPerson}\n    >\n      {titles.map((title) => {\n        switch (title) {\n          case 'name':\n            return (\n              <td className={cn(\n                { 'person--born-before-1650': person.born < 1650 },\n                { 'person--died-after-1800': person.died > 1800 },\n              )}\n              >\n                <PersonName name={person.name} sex={person.sex} />\n              </td>\n            );\n          case 'sex':\n            return (\n              <td className={cn(\n                { 'person--male': person.sex === 'm' },\n                { 'person--female': person.sex === 'f' },\n              )}\n              >\n                {person.sex}\n              </td>\n            );\n          case 'age':\n            return (\n              <td\n                className={cn({ 'person--old': person.age >= 65 })}\n              >\n                {person.age}\n              </td>\n            );\n          case 'mother':\n            return (\n              <td>\n                {person.mother !== '' && (\n                  <PersonName name={person.mother} sex=\"f\" />\n                )}\n              </td>\n            );\n          case 'father':\n            return (\n              <td>\n                {person.father !== '' && (\n                  <PersonName name={person.father} sex=\"m\" />\n                )}\n              </td>\n            );\n          case 'children':\n            return (\n              <td>\n                {person.children.map((child, index) => (\n                  <>\n                    <PersonName name={child.name} sex={child.sex} />\n                    {index !== person.children.length - 1 && ', '}\n                  </>\n                ))}\n              </td>\n            );\n          default:\n            return (\n              <td>{person[title]}</td>\n            );\n        }\n      })}\n    </tr>\n  );\n};\n\nPerson.propTypes = {\n  titles: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    age: PropTypes.number.isRequired,\n    mother: PropTypes.string,\n    father: PropTypes.string,\n    children: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      sex: PropTypes.string,\n    })).isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      personName: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape(\n    { push: PropTypes.func },\n  ).isRequired,\n  location: PropTypes.shape({\n    search: PropTypes.shape({\n      sortBy: PropTypes.string,\n      sortOrder: PropTypes.string,\n      query: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Person;\n","const getData = url => (\n  fetch(url).then(response => response.json())\n);\n\nexport default getData;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport { DebounceInput } from 'react-debounce-input';\nimport Person from './Person';\nimport getData from './getDataApi';\nimport NewPerson from './NewPerson';\n\nconst peopleURL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst date = new Date();\n\nconst getPeopleWithChildren = listOfPeople => (\n  listOfPeople.map((person, index) => ({\n    ...person,\n    children: listOfPeople\n      .filter(child => (\n        child.father === person.name || child.mother === person.name)),\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n    id: index + 1,\n  }))\n);\n\nconst PeopleTable = ({ match, history, location }) => {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    loadPeopleFromServer();\n  }, []);\n\n  const loadPeopleFromServer = async() => {\n    try {\n      const peopleList = await getData(peopleURL);\n\n      setPeople([...getPeopleWithChildren(peopleList)]);\n    } catch {\n      setPeople([]);\n    }\n  };\n\n  const urlParams = new URLSearchParams(location.search);\n\n  const handleSearchingInputChange = ({ target: { value } }) => {\n    if (value === '') {\n      urlParams.delete('query');\n      history.push({ search: urlParams.toString() });\n    } else {\n      urlParams.set('query', value.toLowerCase());\n      history.push({ search: urlParams.toString() });\n    }\n  };\n\n  const getSearchedPeople = (listOfPeople, searchingName) => (\n    listOfPeople.filter(person => (\n      person.name.toLowerCase().includes(searchingName)\n      || (person.father || '').toLowerCase()\n        .includes(searchingName)\n      || (person.mother || '').toLowerCase()\n        .includes(searchingName)\n    )));\n\n  const getSortedPeople = (listOfPeople, sortingTitle) => (\n    listOfPeople.sort((firstPerson, secondPerson) => (\n      typeof firstPerson[sortingTitle] === 'string'\n        ? firstPerson[sortingTitle].localeCompare(secondPerson[sortingTitle])\n        : firstPerson[sortingTitle] - secondPerson[sortingTitle]\n    )));\n\n  const setSortBy = (listOfPeople, sortingTitle, sortingOrder) => {\n    if (sortingOrder === 'desc') {\n      return ([...getSortedPeople(listOfPeople, sortingTitle)].reverse());\n    }\n\n    return [...getSortedPeople(listOfPeople, sortingTitle)];\n  };\n\n  const handleSortClick = (sortingTitle) => {\n    if (urlParams.get('sortBy') && urlParams.get('sortOrder')) {\n      if (sortingTitle === urlParams.get('sortBy')) {\n        if (urlParams.get('sortOrder') === 'asc') {\n          urlParams.set('sortOrder', 'desc');\n        } else {\n          urlParams.set('sortOrder', 'asc');\n        }\n      } else {\n        urlParams.set('sortBy', sortingTitle);\n        urlParams.set('sortOrder', 'asc');\n      }\n    } else {\n      urlParams.set('sortBy', sortingTitle);\n      urlParams.set('sortOrder', 'asc');\n    }\n\n    history.push({ search: urlParams.toString() });\n  };\n\n  const addPerson = (name, sex, born, died, mother, father) => {\n    setPeople([...people, {\n      name,\n      sex,\n      born,\n      died,\n      mother,\n      father,\n      children: people\n        .filter(child => (\n          child.father === name || child.mother === name)),\n      age: died < Infinity ? died - born : date.getFullYear() - born,\n      century:\n        died < Infinity ? Math.ceil(died / 100)\n          : Math.ceil(date.getFullYear() / 100),\n      id:\n        Math.max(...people.map(person => person.id)) + 1,\n    }]);\n  };\n\n  const updateChildren = () => {\n    setPeople(people.map(person => ({\n      ...person,\n      children: people.filter(child => (\n        child.father === person.name || child.mother === person.name)),\n    })));\n  };\n\n  const titles = [\n    'id',\n    'name',\n    'sex',\n    'born',\n    'died',\n    'age',\n    'century',\n    'mother',\n    'father',\n    'children',\n  ];\n\n  let visiblePeople = getSearchedPeople(people, urlParams.get('query') || '');\n\n  visiblePeople = urlParams.get('sortBy') && urlParams.get('sortOrder')\n    ? setSortBy([...visiblePeople],\n      urlParams.get('sortBy'), urlParams.get('sortOrder'))\n    : visiblePeople;\n\n  return (\n    <>\n      <Switch>\n        <Route\n          path=\"/people/new\"\n          exact\n          render={() => (\n            <NewPerson\n              addPerson={addPerson}\n              peopleList={people}\n              updateChildren={updateChildren}\n              match={match}\n              history={history}\n              location={location}\n            />\n          )}\n        />\n        <Route path=\"/people/:personName?\" exact>\n          <NavLink to=\"/people/new\" className=\"people__link\">add</NavLink>\n        </Route>\n      </Switch>\n      <h3>\n        Currently visible people:\n        {' '}\n        {visiblePeople\n          .length}\n      </h3>\n      <DebounceInput\n        debounceTimeout={500}\n        onChange={handleSearchingInputChange}\n        className=\"people__search\"\n        type=\"text\"\n        placeholder=\"Search\"\n      />\n      <table className=\"people-table\">\n        <thead>\n          <tr>\n            {titles.map((title) => {\n              switch (title) {\n                case 'mother':\n                case 'father':\n                case 'children':\n                  return (\n                    <th>{title.toUpperCase()}</th>\n                  );\n                default:\n                  return (\n                    <th\n                      className={\n                        cn(\n                          'title--sortable',\n                          { 'title--active': urlParams.get('sortBy') === title }\n                        )}\n                      onClick={() => handleSortClick(title)}\n                    >\n                      {title.toUpperCase()}\n                    </th>\n                  );\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {visiblePeople\n            .map(currentPerson => (\n              <Person\n                key={currentPerson.id}\n                titles={titles}\n                person={currentPerson}\n                match={match}\n                history={history}\n                location={location}\n              />\n            ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nPeopleTable.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      personName: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape(\n    { push: PropTypes.func },\n  ).isRequired,\n  location: PropTypes.shape({\n    search: PropTypes.shape({}),\n  }).isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport './App.css';\nimport PeopleTable from './PeopleTable';\n\nconst App = () => (\n  <div className=\"people\">\n    <NavLink to=\"/people\" className=\"people__link\">People</NavLink>\n    <Route path=\"/people/:personName?\" component={PeopleTable} />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App test={123} />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}