{"version":3,"sources":["PersonName.js","Person.js","getDataApi.js","PeopleTable.js","App.js","index.js"],"names":["PersonName","_ref","name","sex","react_default","a","createElement","className","Person","titles","person","match","history","location","cn","concat","century","person--selected","toLowerCase","split","join","params","personName","onClick","push","pathname","search","map","title","person--born-before-1650","born","person--died-after-1800","died","src_PersonName","person--male","person--female","person--old","age","mother","father","children","child","index","Fragment","length","getData","url","fetch","then","response","json","getPeopleWithChildren","listOfPeople","Object","objectSpread2","filter","Math","ceil","id","PeopleTable","_useState","useState","_useState2","slicedToArray","people","setPeople","useEffect","loadPeopleFromServer","searchingName","peopleList","regenerator_default","async","_context","prev","next","awrap","sent","toConsumableArray","t0","stop","urlParams","URLSearchParams","getSortedPeople","sortingTitle","sort","firstPerson","secondPerson","localeCompare","visiblePeople","get","includes","sortingOrder","reverse","setSortBy","onChange","_ref2","value","target","delete","toString","set","type","placeholder","toUpperCase","title--active","currentPerson","src_Person","key","App","react_router_dom","to","react_router","path","component","ReactDOM","render","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.a9157ff7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PersonName = ({ name, sex }) => (\n  <span className={sex === 'm' ? 'person--man' : 'person--woman'}>\n    {name}\n  </span>\n);\n\nPersonName.propTypes = {\n  name: PropTypes.string.isRequired,\n  sex: PropTypes.string.isRequired,\n};\nexport default PersonName;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cn from 'classnames';\nimport PersonName from './PersonName';\n\nconst Person = ({ titles, person, match, history, location }) => {\n  const selectPerson = () => {\n    history.push({\n      pathname: `/people/${person.name.toLowerCase().split(' ').join('-')}`,\n      search: location.search,\n    });\n  };\n\n  return (\n    <tr\n      className={\n        cn(\n          'person',\n          `person--lived-in-${person.century}`,\n          {\n            'person--selected':\n              person.name.toLowerCase().split(' ').join('-')\n              === match.params.personName,\n          }\n        )}\n      onClick={selectPerson}\n    >\n      {titles.map((title) => {\n        switch (title) {\n          case 'name':\n            return (\n              <td className={cn(\n                { 'person--born-before-1650': person.born < 1650 },\n                { 'person--died-after-1800': person.died > 1800 },\n              )}\n              >\n                <PersonName name={person.name} sex={person.sex} />\n              </td>\n            );\n          case 'sex':\n            return (\n              <td className={cn(\n                { 'person--male': person.sex === 'm' },\n                { 'person--female': person.sex === 'f' },\n              )}\n              >\n                {person.sex}\n              </td>\n            );\n          case 'age':\n            return (\n              <td\n                className={cn({ 'person--old': person.age >= 65 })}\n              >\n                {person.age}\n              </td>\n            );\n          case 'mother':\n            return (\n              <td>\n                {person.mother !== '' && (\n                  <PersonName name={person.mother} sex=\"f\" />\n                )}\n              </td>\n            );\n          case 'father':\n            return (\n              <td>\n                {person.father !== '' && (\n                  <PersonName name={person.father} sex=\"m\" />\n                )}\n              </td>\n            );\n          case 'children':\n            return (\n              <td>\n                {person.children.map((child, index) => (\n                  <>\n                    <PersonName name={child.name} sex={child.sex} />\n                    {index !== person.children.length - 1 && ', '}\n                  </>\n                ))}\n              </td>\n            );\n          default:\n            return (\n              <td>{person[title]}</td>\n            );\n        }\n      })}\n    </tr>\n  );\n};\n\nPerson.propTypes = {\n  titles: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    age: PropTypes.number.isRequired,\n    mother: PropTypes.string.isRequired,\n    father: PropTypes.string.isRequired,\n    children: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      sex: PropTypes.string,\n    })).isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      personName: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape(\n    { push: PropTypes.func },\n  ).isRequired,\n  location: PropTypes.shape({\n    search: PropTypes.shape({\n      sortBy: PropTypes.string,\n      sortOrder: PropTypes.string,\n      query: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Person;\n","const getData = url => (\n  fetch(url).then(response => response.json())\n);\n\nexport default getData;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport Person from './Person';\nimport getData from './getDataApi';\n\nconst peopleURL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst getPeopleWithChildren = listOfPeople => (\n  listOfPeople.map((person, index) => ({\n    ...person,\n    children: listOfPeople\n      .filter(child => (\n        child.father === person.name || child.mother === person.name)),\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n    id: index + 1,\n  }))\n);\n\nconst PeopleTable = ({ match, history, location }) => {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    loadPeopleFromServer();\n  }, []);\n\n  const loadPeopleFromServer = async() => {\n    try {\n      const peopleList = await getData(peopleURL);\n\n      setPeople([...getPeopleWithChildren(peopleList)]);\n    } catch {\n      setPeople([]);\n    }\n  };\n\n  const urlParams = new URLSearchParams(location.search);\n\n  const handleSearchingInputChange = ({ target: { value } }) => {\n    if (value === '') {\n      urlParams.delete('query');\n      history.push({ search: urlParams.toString() });\n    } else {\n      urlParams.set('query', value.toLowerCase());\n      history.push({ search: urlParams.toString() });\n    }\n  };\n\n  const getSearchedPeople = (listOfPeople, searchingName) => (\n    listOfPeople.filter(person => (\n      person.name.toLowerCase().includes(searchingName)\n      || (person.father || '').toLowerCase()\n        .includes(searchingName)\n      || (person.mother || '').toLowerCase()\n        .includes(searchingName)\n    )));\n\n  const getSortedPeople = (listOfPeople, sortingTitle) => (\n    listOfPeople.sort((firstPerson, secondPerson) => (\n      typeof firstPerson[sortingTitle] === 'string'\n        ? firstPerson[sortingTitle].localeCompare(secondPerson[sortingTitle])\n        : firstPerson[sortingTitle] - secondPerson[sortingTitle]\n    )));\n\n  const setSortBy = (listOfPeople, sortingTitle, sortingOrder) => {\n    if (sortingOrder === 'desc') {\n      return ([...getSortedPeople(listOfPeople, sortingTitle)].reverse());\n    }\n\n    return [...getSortedPeople(listOfPeople, sortingTitle)];\n  };\n\n  const handleSortClick = (sortingTitle) => {\n    if (urlParams.get('sortBy') && urlParams.get('sortOrder')) {\n      if (sortingTitle === urlParams.get('sortBy')) {\n        if (urlParams.get('sortOrder') === 'asc') {\n          urlParams.set('sortOrder', 'desc');\n        } else {\n          urlParams.set('sortOrder', 'asc');\n        }\n      } else {\n        urlParams.set('sortBy', sortingTitle);\n        urlParams.set('sortOrder', 'asc');\n      }\n\n      history.push({ search: urlParams.toString() });\n    }\n  };\n\n  const titles = [\n    'id',\n    'name',\n    'sex',\n    'born',\n    'died',\n    'age',\n    'century',\n    'mother',\n    'father',\n    'children',\n  ];\n\n  let visiblePeople = getSearchedPeople(people, urlParams.get('query') || '');\n\n  visiblePeople = urlParams.get('sortBy') && urlParams.get('sortOrder')\n    ? setSortBy([...visiblePeople],\n      urlParams.get('sortBy'), urlParams.get('sortOrder'))\n    : visiblePeople;\n\n  return (\n    <>\n      <h3>\n        Currently visible people:\n        {' '}\n        {visiblePeople\n          .length}\n      </h3>\n      <input\n        onChange={handleSearchingInputChange}\n        className=\"people__search\"\n        type=\"text\"\n        placeholder=\"Search\"\n      />\n      <table className=\"people-table\">\n        <thead>\n          <tr>\n            {titles.map((title) => {\n              switch (title) {\n                case 'mother':\n                case 'father':\n                case 'children':\n                  return (\n                    <th>{title.toUpperCase()}</th>\n                  );\n                default:\n                  return (\n                    <th\n                      className={\n                        cn(\n                          'title--sortable',\n                          { 'title--active': urlParams.get('sortBy') === title }\n                        )}\n                      onClick={() => handleSortClick(title)}\n                    >\n                      {title.toUpperCase()}\n                    </th>\n                  );\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {visiblePeople\n            .map(currentPerson => (\n              <Person\n                key={currentPerson.id}\n                titles={titles}\n                person={currentPerson}\n                match={match}\n                history={history}\n                location={location}\n              />\n            ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nPeopleTable.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      personName: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape(\n    { push: PropTypes.func },\n  ).isRequired,\n  location: PropTypes.shape({\n    search: PropTypes.shape({}),\n  }).isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport './App.css';\nimport PeopleTable from './PeopleTable';\n\nconst App = () => (\n  <div className=\"people\">\n    <NavLink to=\"/people\" className=\"people__link\">People</NavLink>\n    <Route path=\"/people/:personName?\" component={PeopleTable} />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App test={123} />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}